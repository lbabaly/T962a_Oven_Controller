/**
 * @file      pin_mapping.h (derived from MK22D5.usbdmHardware)
 * @version   1.2.0
 * @brief     Pin declarations for MK22DX128VLF5
 *
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#ifndef PROJECT_HEADERS_PIN_MAPPING_H
#define PROJECT_HEADERS_PIN_MAPPING_H

#include <stddef.h>
#include "derivative.h"

#include "pcr.h"

/**
 * Namespace enclosing USBDM classes
 */
namespace USBDM {

/**
 * @addtogroup USBDM_Group USBDM Peripheral Interface
 * @brief Hardware Peripheral Interface and library
 * @{
 */
/** Dummy port information for pins without an associated PCR */
constexpr PortInfo  __attribute__((unused)) NoPortInfo {0, 0, (IRQn_Type)-1};

/** Port information for PORTA*/
constexpr PortInfo  __attribute__((unused)) PortAInfo {PORTA_BasePtr, PORTA_CLOCK_MASK, PORTA_IRQn};

/** Port information for PORTB*/
constexpr PortInfo  __attribute__((unused)) PortBInfo {PORTB_BasePtr, PORTB_CLOCK_MASK, PORTB_IRQn};

/** Port information for PORTC*/
constexpr PortInfo  __attribute__((unused)) PortCInfo {PORTC_BasePtr, PORTC_CLOCK_MASK, PORTC_IRQn};

/** Port information for PORTD*/
constexpr PortInfo  __attribute__((unused)) PortDInfo {PORTD_BasePtr, PORTD_CLOCK_MASK, PORTD_IRQn};

/** Port information for PORTE*/
constexpr PortInfo  __attribute__((unused)) PortEInfo {PORTE_BasePtr, PORTE_CLOCK_MASK, PORTE_IRQn};


/** Class to static check signal mapping is valid */
template<class Info, int signalNum> class CheckSignal {
#ifdef DEBUG_BUILD
   static_assert((signalNum<Info::numSignals), "Non-existent signal - Modify Configure.usbdm");
   static_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != UNMAPPED_PCR), "Signal is not mapped to a pin - Modify Configure.usbdm");
   static_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != INVALID_PCR),  "Signal doesn't exist in this device/package");
   static_assert((signalNum>=Info::numSignals)||((Info::info[signalNum].gpioBit == UNMAPPED_PCR)||(Info::info[signalNum].gpioBit == INVALID_PCR)||(Info::info[signalNum].gpioBit >= 0)), "Illegal signal");
#endif
};

/** Enables mapping of all allocated pins during startup using mapAllPins() */
static constexpr bool MAP_ALL_PINS = false;

/** Map all allocated pins on a peripheral when peripheral is enabled */
static constexpr bool MAP_ALL_PINS_ON_ENABLE = true;

/*
 * Peripheral Information Classes
 */
/**
 * @addtogroup OSC_Group OSC, Crystal Oscillator
 * @brief Abstraction for Crystal Oscillator
 * @{
 */
#define USBDM_OSC0_IS_DEFINED 
/**
 * Peripheral information for OSC, Crystal Oscillator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Osc0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile OSC_Type &osc() {
      return *(OSC_Type *)OSC0_BasePtr;
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:osc0_mk

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   //! Frequency of OSC Clock or Crystal
   static constexpr uint32_t osc_clock = 8000000UL;

   //! Frequency of 32K OSC Clock or Crystal (if applicable)
   static constexpr uint32_t osc32k_clock = 0UL;

   //! Oscillator control register
   static constexpr uint32_t cr =
      OSC_CR_ERCLKEN(1)  | // External Reference Enable
      OSC_CR_EREFSTEN(0) | // External Reference Stop Enable
      OSC_CR_SCP(2);       // Oscillator load capacitance

   /**
    * Get OSC clock (internal, assumed available)
    *
    * @return Clock frequency as uint32_t in Hz
    */
   static constexpr uint32_t getOscClock() {
      return osc_clock;
   }

   /**
    * Get OSC clock (external, gated by OSC_CR_ERCLKEN)
    *
    * @return Clock frequency as uint32_t in Hz
    */
   static uint32_t getOscerClock() {
      return (osc().CR&OSC_CR_ERCLKEN_MASK)?osc_clock:0;
   }

   /**
    * Get OSC32KCLK clock
    *
    * @return Clock frequency as uint32_t in Hz
   
    * @note This clock is only available if a 32kHz crystal or external clock is used 
    */
   static uint32_t getOsc32kClock() {
      return osc32k_clock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: XTAL0                = PTA19 (p25)                    */  { PortAInfo,  GPIOA_BasePtr,  19,      PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   1: EXTAL0               = PTA18 (p24)                    */  { PortAInfo,  GPIOA_BasePtr,  18,      PORT_PCR_MUX(0)|defaultPcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      enablePortClocks(PORTA_CLOCK_MASK);

      PORTA->GPCHR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0x000CUL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
      enablePortClocks(PORTA_CLOCK_MASK);

      PORTA->GPCHR = PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0xCU);
   }

};

/** 
 * End group OSC_Group
 * @}
 */
/**
 * @addtogroup RTC_Group RTC, Real Time Clock
 * @brief Abstraction for Real Time Clock
 * @{
 */
#define USBDM_RTC_IS_DEFINED 
/**
 * Peripheral information for RTC, Real Time Clock.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class RtcInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile RTC_Type &rtc() {
      return *(RTC_Type *)RTC_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_RTC_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      RTC_Alarm_IRQn, RTC_Seconds_IRQn, };

   // Template:rtc_tamper_wpon

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Frequency of RTC External Clock or Crystal
   static constexpr uint32_t osc_input_freq = 32768UL;

   //! Oscillator control register
   static constexpr uint32_t cr =
      RTC_CR_OSCE(0) | // Enables 32kHz oscillator [RTC_32K]
      RTC_CR_CLKO(0) | // Disables RTC 32kHz Clock Output
      RTC_CR_UM(0)   | // Update Mode
      RTC_CR_SUP(0)  | // Supervisor access
      RTC_CR_WPE(0)  | // Wakeup Pin Enable
      RTC_CR_SCP(0);   // RTC Oscillator load capacitance

   //! RTC Time Compensation Register
   static constexpr uint32_t tcr =
      RTC_TCR_CIR(0) | // Compensation Interval Register
      RTC_TCR_TCR(0);  // Time Compensation Register

   //! RTC Lock Register
   static constexpr uint32_t lr =
      RTC_LR_LRL(1) | // Lock Register Lock
      RTC_LR_SRL(1) | // Status Register Lock 
      RTC_LR_CRL(1) | // Control Register Lock
      RTC_LR_TCL(1);  // Time Compensation Lock

   #if defined(RTC_WAR_TSRW)
   //! RTC Write Access Register
   static constexpr uint32_t war =
      RTC_WAR_IERW(1) | // Interrupt Enable Register Write
      RTC_WAR_LRW(1)  | // Lock Register Write
      RTC_WAR_SRW(1)  | // Status Register Write
      RTC_WAR_CRW(1)  | // Control Register Write
      RTC_WAR_TCRW(1) | // Time Compensation Register Write
      RTC_WAR_TARW(1) | // Time Alarm Register Write
      RTC_WAR_TPRW(1) | // Time Prescaler Register Write
      RTC_WAR_TSRW(1);  // Time Seconds Register Write
   #endif

   #if defined(RTC_RAR_TSRR)
   //! RTC Read Access Register
   static constexpr uint32_t rar =
      RTC_RAR_IERR(1) | // Interrupt Enable Register Read  
      RTC_RAR_LRR(1)  | // Lock Register Read              
      RTC_RAR_SRR(1)  | // Status Register Read            
      RTC_RAR_CRR(1)  | // Control Register Read           
      RTC_RAR_TCRR(1) | // Time Compensation Register Read 
      RTC_RAR_TARR(1) | // Time Alarm Register Read        
      RTC_RAR_TPRR(1) | // Time Prescaler Register Read    
      RTC_RAR_TSRR(1);  // Time Seconds Register Read
   #endif

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Time for cold start (corrected for 12 leap years since 1970)
   static constexpr uint32_t coldStartTime = 
            ((((2017-1970)*365UL +
               (181) +
               (1+12-1))*24 +
              (12))*60 +
             (0))*60;
   /**
    * Get RTC clock frequency (internal, not masked by RTC_CR_CLKO)
    *
    * @return Clock frequency as uint32_t
    */
   static uint32_t getInternalClock() {
      // RTC uses EXTAL32/XTAL32 clock
      return (rtc().CR&RTC_CR_OSCE_MASK)?osc_input_freq:0;
   }

   /**
    * Get RTC clock frequency (external, masked by RTC_CR_CLKO)
    *
    * @return Clock frequency as uint32_t
    */
   static uint32_t getExternalClock() {
      return (rtc().CR&RTC_CR_CLKO_MASK)?0:getInternalClock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: XTAL32               = XTAL32 (p14)                   */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   1: EXTAL32              = EXTAL32 (p15)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group RTC_Group
 * @}
 */
/**
 * @addtogroup MCG_Group MCG, Multipurpose Clock Generator
 * @brief Abstraction for Multipurpose Clock Generator
 * @{
 */
#define USBDM_MCG_IS_DEFINED 
/**
 * Peripheral information for MCG, Multipurpose Clock Generator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class McgInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile MCG_Type &mcg() {
      return *(MCG_Type *)MCG_BasePtr;
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      MCG_IRQn, };

   // Template:mcg_mk

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Indicates need for special handling of CLKDIV1 register
   static constexpr int ERRATA_E2448 = 0;

   enum ClockMode {
      ClockMode_None     = -1,
      ClockMode_FEI      = 0,
      ClockMode_FEE,
      ClockMode_FBI,
      ClockMode_BLPI,
      ClockMode_FBE,
      ClockMode_BLPE,
      ClockMode_PBE,
      ClockMode_PEE,
   };

   //! Frequency of Slow Internal Reference Clock [~32kHz]
   static constexpr uint32_t system_slow_irc_clock = 32768UL;

   //! Frequency of Fast Internal Reference Clock [~4MHz]
   static constexpr uint32_t system_fast_irc_clock = 4000000UL;

   //! PLL VDIV min value
   static constexpr uint32_t pll_vdiv_min = 24;

   //! PLL post divider
   static constexpr uint32_t pll_post_divider = 1;

   //! Structure for clock configurations
   struct ClockInfo {
      //! System Clock Divider Register 1
      const uint32_t clkdiv1;

   #ifdef SIM_CLKDIV3_PLLFLLDIV
      //! PLLFLL clock divider divisor & fraction
      const uint32_t clkdiv3;
   #endif

      //! SIM SOPT2 - Clock selectors for various peripherals
      const uint32_t sopt2;

      //! Clock Mode
      const ClockMode clockMode:8;

      //! Control Register 1 - FRDIV, IRCLKEN, IREFSTEN, (-CLKS, -IREFS)
      const uint8_t c1;
      //! Control Register 2 - LOCRE0, RANGE0, HGO0, EREFS0, IRCS, (-LP)
      const uint8_t c2;
      //! Control Register 4 - DMX32, DRST_DRS
      const uint8_t c4;
      //! Control Register 5 - PLLCLKEN0, PLLSTEN0, PRDIV0
      const uint8_t c5;
      //! Control Register 6 - LOLIE0, CME0, VDIV0, (-PLLS)
      const uint8_t c6;
      //! Status and Control Register - FCRDIV
      const uint8_t sc;
      //! Control Register 7 - OSCSEL
      const uint8_t c7;
      //! Control Register 8 - LOCRE1, LOLRE, CME1
      const uint8_t c8;
   };

   /**
    * Get MCGERCLK
    *
    * @return MCGERCLK as uint32_t
    */
   static uint32_t getErcClock() {
   
      switch((mcg().C7&MCG_C7_OSCSEL_MASK)) {
         default               : return 0;
         case MCG_C7_OSCSEL(0) : return Osc0Info::getOscClock();
         case MCG_C7_OSCSEL(1) : return RtcInfo::getInternalClock();
      }
   }

   /**
    * Get Internal MCGIRCLK (ungated by MCG_C1_IRCLKEN_MASK)
    *
    * @return MCGIRCLK as uint32_t
    */
   static uint32_t getInternalIrcClock() {
         if (mcg().C2&MCG_C2_IRCS_MASK) {
   #ifdef MCG_SC_FCRDIV_MASK
            return (system_fast_irc_clock/(1<<((mcg().SC&MCG_SC_FCRDIV_MASK)>>MCG_SC_FCRDIV_SHIFT)));
   #else
            return system_fast_irc_clock;
   #endif
         }
         else {
            return system_slow_irc_clock;
         }
   }

   /**
    * Get MCGIRCLK (gated by MCG_C1_IRCLKEN_MASK)
    *
    * @return MCGIRCLK as uint32_t
    */
   static uint32_t getMcgIrClock() {
      if (mcg().C1&MCG_C1_IRCLKEN_MASK) {
         return getInternalIrcClock();
      }
      else {
         return 0;
      }
   }

};

/** 
 * End group MCG_Group
 * @}
 */
/**
 * @addtogroup SIM_Group SIM, System Integration Module
 * @brief Abstraction for System Integration Module
 * @{
 */
#define USBDM_SIM_IS_DEFINED 
/**
 * Peripheral information for SIM, System Integration Module.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
   /**
    * Peripheral Clock sources
    */
   enum SimPeripheralClockSource {
      SimPeripheralClockSource_McgFll = SIM_SOPT2_PLLFLLSEL(0), //!< MCG FLL Clock
      SimPeripheralClockSource_McgPll = SIM_SOPT2_PLLFLLSEL(1), //!< MCG PLL Clock
      SimPeripheralClockSource_Irc48m = SIM_SOPT2_PLLFLLSEL(3), //!< IRC 48MHz clock
   };

   /**
    * USB full-speed clock sources
    */
   enum SimUsbFullSpeedClockSource {
      SimUsbFullSpeedClockSource_McgFll = SIM_SOPT2_USBSRC(0), //!< External bypass clock (USB_CLKIN)
      SimUsbFullSpeedClockSource_McgPll = SIM_SOPT2_USBSRC(1), //!< Peripheral clock selected by SIM.SOPT2[PLLFLLSEL] divided by SIM.CLKDIV2
   };

   /**
    * Select the ADC0 Trigger source in STOP and VLPS modes, or when ADC0 Alternative Trigger is active.
    */
   enum SimAdc0Trigger {
      SimAdc0Trigger_PdbExTrig    = SIM_SOPT7_ADC0TRGSEL(0),   //!< External Trigger Source PDBx_EXTRG
      SimAdc0Trigger_Cmp0         = SIM_SOPT7_ADC0TRGSEL(1),   //!< Comparator 0
      SimAdc0Trigger_Cmp1         = SIM_SOPT7_ADC0TRGSEL(2),   //!< Comparator 1
      SimAdc0Trigger_Cmp2         = SIM_SOPT7_ADC0TRGSEL(3),   //!< Comparator 2 (if present)
      SimAdc0Trigger_PitCh0       = SIM_SOPT7_ADC0TRGSEL(4),   //!< PIT Channel 0
      SimAdc0Trigger_PitCh1       = SIM_SOPT7_ADC0TRGSEL(5),   //!< PIT Channel 1
      SimAdc0Trigger_PitCh2       = SIM_SOPT7_ADC0TRGSEL(6),   //!< PIT Channel 2
      SimAdc0Trigger_PitCh3       = SIM_SOPT7_ADC0TRGSEL(7),   //!< PIT Channel 3
      SimAdc0Trigger_Ftm0         = SIM_SOPT7_ADC0TRGSEL(8),   //!< FTM0 Init and Ext Trigger Outputs
      SimAdc0Trigger_Ftm1         = SIM_SOPT7_ADC0TRGSEL(9),   //!< FTM1 Init and Ext Trigger Outputs
      SimAdc0Trigger_Ftm2         = SIM_SOPT7_ADC0TRGSEL(10),  //!< FTM2 Init and Ext Trigger Outputs (if present)
      SimAdc0Trigger_Ftm3         = SIM_SOPT7_ADC0TRGSEL(11),  //!< FTM3 Init and Ext Trigger Outputs (if present)
      SimAdc0Trigger_RtcAlarm     = SIM_SOPT7_ADC0TRGSEL(12),  //!< RTC Alarm
      SimAdc0Trigger_RtcSeconds   = SIM_SOPT7_ADC0TRGSEL(13),  //!< RTC Seconds
      SimAdc0Trigger_Lptrm        = SIM_SOPT7_ADC0TRGSEL(14),  //!< LPTMR
      SimAdc0Trigger_15           = SIM_SOPT7_ADC0TRGSEL(15),  //!< Reserved
   };

   /**
    * Select the ADC0 Alternative Trigger sources.
    * If PDB is selected then Pre-trigger 0/1 is determined by the PDB setup
    * otherwise Pre-trigger 0/1 is determined by this selection.
    */
   enum SimAdc0AltTrigger {
      SimAdc0AltTrigger_Pdb           = SIM_SOPT7_ADC0ALTTRGEN(0),                              //!< PDB trigger
      SimAdc0AltTrigger_PreTrigger_0  = SIM_SOPT7_ADC0ALTTRGEN(1)|SIM_SOPT7_ADC0PRETRGSEL(0),   //!< Pre-trigger 0 = A (SC1[0])
      SimAdc0AltTrigger_PreTrigger_1  = SIM_SOPT7_ADC0ALTTRGEN(1)|SIM_SOPT7_ADC0PRETRGSEL(1),   //!< Pre-trigger 1 = B (SC1[1])
   };

class SimInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile SIM_Type &sim() {
      return *(SIM_Type *)SIM_BasePtr;
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:sim_mk22d5

   //! System Options Register 1
   static constexpr uint32_t sopt1 = 
   #ifdef SIM_SOPT1_OSC32KOUT
      SIM_SOPT1_OSC32KOUT(-1) |    // 32K oscillator clock out pin select
   #endif
      SIM_SOPT1_OSC32KSEL(3);     // 32K oscillator clock select

   /**
    * Get ERCLK32K clock frequency
    *
    * @return Clock frequency as a uint32_t in Hz
    */
   static uint32_t getErc32kClock() {
   
      switch(sim().SOPT1&SIM_SOPT1_OSC32KSEL_MASK) {
         default                     : return 0;
         case SIM_SOPT1_OSC32KSEL(0) : return Osc0Info::getOsc32kClock();
         case SIM_SOPT1_OSC32KSEL(2) : return RtcInfo::getExternalClock();
         case SIM_SOPT1_OSC32KSEL(3) : return 1000;
      }
   }

   /**
    * Set Peripheral clock source
    *
    * @param simPeripheralClockSource Clock source for peripheral clock
    */
   static void setPeripheralClock(SimPeripheralClockSource simPeripheralClockSource) {
      sim().SOPT2 = (sim().SOPT2&~SIM_SOPT2_PLLFLLSEL_MASK) | simPeripheralClockSource;
   }

   /**
    * Get Peripheral clock frequency
    *
    * @return Frequency as a uint32_t in Hz
    */
   static uint32_t getPeripheralClock() {
      
      switch(sim().SOPT2&SIM_SOPT2_PLLFLLSEL_MASK) {
         default:                     return 0;
         case SIM_SOPT2_PLLFLLSEL(0): return SystemMcgFllClock;
         case SIM_SOPT2_PLLFLLSEL(1): return SystemMcgPllClock;
      }
   }

   /** 
    * Get UART0 input clock frequency
    *
    * @return Clock frequency in Hz
    */
   static inline uint32_t getUart0Clock() {
      return SystemCoreClock;
   }

   /** 
    * Get UART1 input clock frequency
    *
    * @return Clock frequency in Hz
    */
   static inline uint32_t getUart1Clock() {
      return SystemCoreClock;
   }

   /** 
    * Get UART2 input clock frequency
    *
    * @return Clock frequency in Hz
    */
   static inline uint32_t getUart2Clock() {
      return SystemBusClock;
   }

   #ifdef SIM_SOPT2_USBSRC_MASK
   /**
    * Set USB Full-speed clock source
    *
    * @param simUsbFullSpeedClockSource Clock source for peripheral clock
    */
   static void setUsbFullSpeedClock(SimUsbFullSpeedClockSource simUsbFullSpeedClockSource) {
      sim().SOPT2 = (sim().SOPT2&~SIM_SOPT2_USBSRC_MASK) | simUsbFullSpeedClockSource;
   }

   /**
    * Get USB clock frequency
    *
    * @return Clock frequency as a uint32_t in Hz
    */
   static uint32_t getUsbClock() {
      switch ((sim().SOPT2&SIM_SOPT2_USBSRC_MASK)) {
         default:
         case SIM_SOPT2_USBSRC(0): return 48000000;
         case SIM_SOPT2_USBSRC(1): return  (getPeripheralClock()*
            (((sim().CLKDIV2&SIM_CLKDIV2_USBFRAC_MASK)>>SIM_CLKDIV2_USBFRAC_SHIFT)+1))/
            (((sim().CLKDIV2&SIM_CLKDIV2_USBDIV_MASK)>>SIM_CLKDIV2_USBDIV_SHIFT)+1);
      }
   }
   #endif

   //! System Options Register 2
   static constexpr uint32_t sopt2 = 
   #ifdef SIM_SOPT2_TRACECLKSEL
      SIM_SOPT2_TRACECLKSEL(0) |      // Debug trace clock select
   #endif
   #ifdef SIM_SOPT2_TIMESRC
      SIM_SOPT2_TIMESRC(-1) |          // IEEE 1588 timestamp clock source select
   #endif
   #ifdef SIM_SOPT2_RMIISRC
      SIM_SOPT2_RMIISRC(-1) |          // Ethernet RMII clock source select
   #endif
   #ifdef SIM_SOPT2_SDHCSRC
         SIM_SOPT2_SDHCSRC(-1) |       // SDHC clock source select
   #endif
   #ifdef SIM_SOPT2_UART0SRC
      SIM_SOPT2_UART0SRC(-1) |         // UART0 clock source select
   #endif
   #ifdef SIM_SOPT2_LPUARTSRC
         SIM_SOPT2_LPUARTSRC(-1) |     // LPUART clock source select
   #endif
   #ifdef SIM_SOPT2_LPUART0SRC
         SIM_SOPT2_LPUART0SRC(-1) |     // LPUART clock source select
   #endif
   #ifdef SIM_SOPT2_PTD7PAD
         SIM_SOPT2_PTD7PAD(0) |       // PTD7 pad drive strength
   #endif
   #ifdef SIM_SOPT2_TPMSRC
         SIM_SOPT2_TPMSRC(-1) |        // TPM clock source select
   #endif
   #ifdef SIM_SOPT2_USBSRC
         SIM_SOPT2_USBSRC(1) |        // USB clock source select
   #endif
   #ifdef SIM_SOPT2_FBSL
         SIM_SOPT2_FBSL(-1) |          // FlexBus security level
   #endif
   #ifdef SIM_SOPT2_PLLFLLSEL
         SIM_SOPT2_PLLFLLSEL(1)|      // PLL/FLL clock select
   #endif
   #ifdef SIM_SOPT2_RTCCLKOUTSEL
         SIM_SOPT2_RTCCLKOUTSEL(1) |  // RTC clock out select
   #endif
         SIM_SOPT2_CLKOUTSEL(2);      // CLKOUT pin clock source select

   //! System Options Register 4
   static constexpr uint32_t sopt4 = 
   #ifdef SIM_SOPT4_FTM3TRG1SRC
      SIM_SOPT4_FTM3TRG1SRC(-1) |   // FlexTimer 3 Hardware Trigger 1 Source Select
   #endif
   #ifdef SIM_SOPT4_FTM3TRG0SRC
      SIM_SOPT4_FTM3TRG0SRC(-1) |   // FlexTimer 3 Hardware Trigger 0 Source Select
   #endif
   #ifdef SIM_SOPT4_FTM0TRG1SRC
      SIM_SOPT4_FTM0TRG1SRC(0) |   // FlexTimer 0 Hardware Trigger 1 Source Select
   #endif
   #ifdef SIM_SOPT4_FTM0TRG0SRC
      SIM_SOPT4_FTM0TRG0SRC(0) |   // FlexTimer 0 Hardware Trigger 0 Source Select
   #endif
   #ifdef SIM_SOPT4_FTM3CLKSEL
      SIM_SOPT4_FTM3CLKSEL(-1)  |   // FlexTimer 3 External Clock Pin Select
   #endif
   #ifdef SIM_SOPT4_FTM2CLKSEL
      SIM_SOPT4_FTM2CLKSEL(0)  |   // FlexTimer 2 External Clock Pin Select
   #endif
   #ifdef SIM_SOPT4_FTM1CLKSEL
      SIM_SOPT4_FTM1CLKSEL(0)  |   // FlexTimer 1 External Clock Pin Select
   #endif
   #ifdef SIM_SOPT4_FTM0CLKSEL
      SIM_SOPT4_FTM0CLKSEL(0)  |   // FlexTimer 0 External Clock Pin Select
   #endif
   #ifdef SIM_SOPT4_FTM2CH1SRC
      SIM_SOPT4_FTM2CH1SRC(-1)  |   // FTM2 channel 1 input capture source select
   #endif
   #ifdef SIM_SOPT4_FTM2CH0SRC
      SIM_SOPT4_FTM2CH0SRC(0)  |   // FTM2 channel 0 input capture source select
   #endif
   #ifdef SIM_SOPT4_FTM1CH0SRC
      SIM_SOPT4_FTM1CH0SRC(0)  |   // FTM1 channel 0 input capture source select
   #endif
   #ifdef SIM_SOPT4_FTM3FLT0
      SIM_SOPT4_FTM3FLT0(-1)    |   // FlexTimer 3 Fault 0 Select
   #endif
   #ifdef SIM_SOPT4_FTM2FLT0
      SIM_SOPT4_FTM2FLT0(0)    |   // FlexTimer 2 Fault 0 Select
   #endif
   #ifdef SIM_SOPT4_FTM1FLT0
      SIM_SOPT4_FTM1FLT0(0)    |   // FlexTimer 1 Fault 0 Select
   #endif
   #ifdef SIM_SOPT4_FTM0FLT3
      SIM_SOPT4_FTM0FLT3(-1)    |   // FlexTimer 0 Fault 3 Select
   #endif
   #ifdef SIM_SOPT4_FTM0FLT2
      SIM_SOPT4_FTM0FLT2(-1)    |   // FlexTimer 0 Fault 2 Select
   #endif
      SIM_SOPT4_FTM0FLT1(0)    |   // FlexTimer 0 Fault 1 Select
      SIM_SOPT4_FTM0FLT0(0);       // FlexTimer 0 Fault 0 Select

   //! System Options Register 5
   static constexpr uint32_t sopt5 = 
      SIM_SOPT5_UART0TXSRC(0) |      // UART 0 transmit data source select
      SIM_SOPT5_UART0RXSRC(0) |      // UART 0 receive data source select
      SIM_SOPT5_UART1TXSRC(0) |      // UART 1 transmit data source select
      SIM_SOPT5_UART1RXSRC(0) |      // UART 1 receive data source select
   #ifdef SIM_SOPT5_LPUART0RXSRC
      SIM_SOPT5_LPUART0RXSRC(-1) |  // LPUART 0 receive data source select
   #endif
   #ifdef SIM_SOPT5_LPUART0TXSRC
      SIM_SOPT5_LPUART0TXSRC(-1) |  // LPUART 0 transmit data source select
   #endif
      0;

   /**
    * Select the ADC0 Trigger source
    * 
    * If PDB is selected by SimAdc0Trigger then Pre-trigger 0/1 is determined by the PDB setup,
    * otherwise Pre-trigger 0/1 is determined by this parameter.
    * For example, setAdc0Triggers(SimAdc0AltTrigger_PreTrigger_1, SimAdc0Trigger_PitCh0) will set the trigger source
    * to PIT channel 0 and conversion will use SC1[1]/R[1]. 
    *
    * @param[in] simAdc0AltTrigger  Select the ADC0 Alternative Trigger sources 
    * @param[in] simAdc0Trigger     Select the ADC0 Trigger source in STOP and VLPS modes, or when ADC0 Alternative Trigger is active.
    */
   static void setAdc0Triggers(SimAdc0AltTrigger simAdc0AltTrigger, SimAdc0Trigger simAdc0Trigger=SimAdc0Trigger_PdbExTrig) {
      sim().SOPT7 = (sim().SOPT7&~(SIM_SOPT7_ADC0TRGSEL_MASK|SIM_SOPT7_ADC0ALTTRGEN_MASK))|simAdc0Trigger|simAdc0AltTrigger;
   };

   //! System Options Register 7
   static constexpr uint32_t sopt7 = 
   #ifdef SIM_SOPT7_ADC1ALTTRGEN
      SIM_SOPT7_ADC1ALTTRGEN(-1) |    // ADC1 alternate trigger enable
      SIM_SOPT7_ADC1PRETRGSEL(-1) |   // ADC1 pretrigger select
      SIM_SOPT7_ADC1TRGSEL(-1) |      // ADC1 trigger select

   #endif
      SIM_SOPT7_ADC0ALTTRGEN(0) |    // ADC0 alternate trigger enable
      SIM_SOPT7_ADC0PRETRGSEL(0) |   // ADC0 pretrigger select
      SIM_SOPT7_ADC0TRGSEL(0);       // ADC0 trigger select

   #ifdef SIM_CLKDIV2_USBDIV_MASK
   //! System Clock Divider Register 2
   //! USB clock divider divisor & fraction
   static constexpr uint32_t clkdiv2 = 2;
   #endif

   /**
    * Initialise SIM registers
    */
   static void initRegs() {
   #ifdef SIM_SCGC4_USBOTG_MASK
      // The USB interface must be disabled for clock changes to have effect
      sim().SCGC4 &= ~SIM_SCGC4_USBOTG_MASK;
   #endif
   
      sim().SOPT1 = sopt1;
      // sim_sopt2_pllfllsel may also be altered by MCG clock code
      sim().SOPT2 = sopt2;
      sim().SOPT4 = sopt4;
      sim().SOPT5 = sopt5;
      sim().SOPT7 = sopt7;
   
   #ifdef SIM_CLKDIV2_USBDIV_MASK
      sim().CLKDIV2 = clkdiv2;
   #endif
   }

};

/** 
 * End group SIM_Group
 * @}
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Abstraction for Analogue Input
 * @{
 */
#define USBDM_ADC0_IS_DEFINED 
/**
 * Peripheral information for ADC, Analogue Input.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Adc0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile ADC_Type &adc() {
      return *(ADC_Type *)ADC0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_ADC0_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      ADC0_IRQn, };

   // Template:adc0_diff_a

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   /** Map all allocated pins on a peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Default value for ADCx_CFG1 register
   static constexpr uint32_t cfg1  = 
       ADC_CFG1_ADICLK(3)|
       ADC_CFG1_MODE(2)|
       ADC_CFG1_ADLSMP(0)|
       ADC_CFG1_ADIV(0)|
       ADC_CFG1_ADLPC(0);

   //! Default value for ADCx_CFG2 register
    static constexpr uint32_t cfg2  = 
       ADC_CFG2_MUXSEL_MASK | // Choose 'b' channels
       ADC_CFG2_ADLSTS(0)|
       ADC_CFG2_ADHSC(0)|
       ADC_CFG2_ADACKEN(0);

   //! Default value for ADCx_SC2 register
   static constexpr uint32_t sc2  =
       ADC_SC2_ACFE(0)|
       ADC_SC2_ACFGT(0)|
       ADC_SC2_ACREN(0)|
       ADC_SC2_REFSEL(0)|
       ADC_SC2_DMAEN(0)|
       ADC_SC2_ADTRG(0);

   //! Default value for ADCx_CV1 register
   static constexpr uint32_t cv1  = 0;

   //! Default value for ADCx_CV2 register
   static constexpr uint32_t cv2  = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 23;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: ADC0_SE0             = ADC0_DP0 (p7)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   1: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   2: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   3: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   4: ADC0_SE4b            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   5: ADC0_SE5b            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   6: ADC0_SE6b            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   7: ADC0_SE7b            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   8: ADC0_SE8             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   9: ADC0_SE9             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  10: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  11: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  12: ADC0_SE12            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  13: ADC0_SE13            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  14: ADC0_SE14            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  15: ADC0_SE15            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  16: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  17: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  18: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  19: ADC0_SE19            = ADC0_DM0 (p8)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*  20: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  21: ADC0_SE21            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  22: ADC0_SE22            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoDP {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 1;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
            /*   0: ADC0_DP0             = ADC0_DP0 (p7)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoDM {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 1;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
            /*   0: ADC0_DM0             = ADC0_DM0 (p8)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

/** 
 * End group ADC_Group
 * @}
 */
/**
 * @addtogroup CMP_Group CMP, Analogue Comparator
 * @brief Abstraction for Analogue Comparator
 * @{
 */
#define USBDM_CMP0_IS_DEFINED 
/**
 * Peripheral information for CMP, Analogue Comparator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Cmp0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile CMP_Type &cmp() {
      return *(CMP_Type *)CMP0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      CMP0_IRQn, };

   // Template:cmp0_pstm7

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   //! CMP Control Register 0
   static constexpr uint32_t cr0 =
      CMP_CR0_FILTER_CNT(7)     | // Filter Sample Count
      CMP_CR0_HYSTCTR(3);         // Comparator hard block hysteresis control

   #ifndef CMP_CR1_TRIGM
   #define CMP_CR1_TRIGM(x) 0
   #endif

   //! CMP Control Register 1
   static constexpr uint32_t cr1 =
      CMP_CR1_SE(0)    | // Sample Enable
      CMP_CR1_WE(0)    | // Windowing Enable
      CMP_CR1_TRIGM(0) | // Trigger Mode Enable
      CMP_CR1_PMODE(0) | // Power mode Select
      CMP_CR1_INV(0)   | // Comparator Invert
      CMP_CR1_COS(0)   | // Comparator Output Select
      CMP_CR1_OPE(0);    // Comparator Output Pin Enable

   //! CMP Filter Period Register
   static constexpr uint32_t fpr =
      CMP_FPR_FILT_PER(255); // Filter Sample Period

   //! CMP Status and Control Register
   static constexpr uint32_t scr =
   #ifdef CMP_SCR_DMAEN
      CMP_SCR_DMAEN(0) | // DMA Enable Control
   #endif
      CMP_SCR_IER(0) | // Comparator Interrupt Enable Rising
      CMP_SCR_IEF(0);  // Comparator Interrupt Enable Falling

   //! DAC Control Register
   static constexpr uint32_t daccr =
      CMP_DACCR_VRSEL(1); // Supply Voltage Reference Source Select

   //! MUX Control Register
   static constexpr uint32_t muxcr =
      CMP_MUXCR_PSEL(1)| // Plus Input Mux Control
      CMP_MUXCR_MSEL(7); // Minus Input Mux Control

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (1 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: CMP0_IN0             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: CMP0_IN1             = PTC7 (p40)                     */  { PortCInfo,  GPIOC_BasePtr,  7,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   2: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   3: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   4: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   5: CMP0_IN5             = VREF_OUT (p13)                 */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   6: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   8: CMP0_OUT             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      enablePortClocks(PORTC_CLOCK_MASK);

      PORTC->GPCLR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x0080UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
      enablePortClocks(PORTC_CLOCK_MASK);

      PORTC->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x80U);
   }

};

#define USBDM_CMP1_IS_DEFINED 
/**
 * Peripheral information for CMP, Analogue Comparator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Cmp1Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile CMP_Type &cmp() {
      return *(CMP_Type *)CMP1_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      CMP1_IRQn, };

   // Template:cmp0_pstm7

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   //! CMP Control Register 0
   static constexpr uint32_t cr0 =
      CMP_CR0_FILTER_CNT(0)     | // Filter Sample Count
      CMP_CR0_HYSTCTR(0);         // Comparator hard block hysteresis control

   #ifndef CMP_CR1_TRIGM
   #define CMP_CR1_TRIGM(x) 0
   #endif

   //! CMP Control Register 1
   static constexpr uint32_t cr1 =
      CMP_CR1_SE(0)    | // Sample Enable
      CMP_CR1_WE(0)    | // Windowing Enable
      CMP_CR1_TRIGM(0) | // Trigger Mode Enable
      CMP_CR1_PMODE(0) | // Power mode Select
      CMP_CR1_INV(0)   | // Comparator Invert
      CMP_CR1_COS(0)   | // Comparator Output Select
      CMP_CR1_OPE(0);    // Comparator Output Pin Enable

   //! CMP Filter Period Register
   static constexpr uint32_t fpr =
      CMP_FPR_FILT_PER(0); // Filter Sample Period

   //! CMP Status and Control Register
   static constexpr uint32_t scr =
   #ifdef CMP_SCR_DMAEN
      CMP_SCR_DMAEN(0) | // DMA Enable Control
   #endif
      CMP_SCR_IER(0) | // Comparator Interrupt Enable Rising
      CMP_SCR_IEF(0);  // Comparator Interrupt Enable Falling

   //! DAC Control Register
   static constexpr uint32_t daccr =
      CMP_DACCR_VRSEL(0); // Supply Voltage Reference Source Select

   //! MUX Control Register
   static constexpr uint32_t muxcr =
      CMP_MUXCR_PSEL(0)| // Plus Input Mux Control
      CMP_MUXCR_MSEL(0); // Minus Input Mux Control

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: CMP1_IN0             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: CMP1_IN1             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   3: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   4: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   5: CMP1_IN5             = VREF_OUT (p13)                 */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   6: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   8: CMP1_OUT             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group CMP_Group
 * @}
 */
/**
 * @addtogroup CMT_Group CMT, Carrier Modulator Transmitter
 * @brief Abstraction for Carrier Modulator Transmitter
 * @{
 */
#define USBDM_CMT_IS_DEFINED 
/**
 * Peripheral information for CMT, Carrier Modulator Transmitter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class CmtInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile CMT_Type &cmt() {
      return *(CMT_Type *)CMT_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMT_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      CMT_IRQn, };

   // Template:cmt_0

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: CMT_IRO              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group CMT_Group
 * @}
 */
/**
 * @addtogroup Control_Group CONTROL, Control
 * @brief Abstraction for Control
 * @{
 */
#define USBDM_CONTROL_IS_DEFINED 
/**
 * Peripheral information for CONTROL, Control.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class ControlInfo {
public:
   // Template:control

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: RESET_b              = RESET_b (p26)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   1: JTAG_TCLK            = PTA0 (p17)                     */  { PortAInfo,  GPIOA_BasePtr,  0,       PORT_PCR_MUX(7)|defaultPcrValue  },
         /*   2: SWD_CLK              = PTA0 (p17)                     */  { PortAInfo,  GPIOA_BasePtr,  0,       PORT_PCR_MUX(7)|defaultPcrValue  },
         /*   3: JTAG_TDI             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: JTAG_TDO             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   5: TRACE_SWO            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   6: JTAG_TMS             = PTA3 (p20)                     */  { PortAInfo,  GPIOA_BasePtr,  3,       PORT_PCR_MUX(7)|defaultPcrValue  },
         /*   7: SWD_DIO              = PTA3 (p20)                     */  { PortAInfo,  GPIOA_BasePtr,  3,       PORT_PCR_MUX(7)|defaultPcrValue  },
         /*   8: NMI_b                = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      enablePortClocks(PORTA_CLOCK_MASK);

      PORTA->GPCLR = pcrValue|PORT_PCR_MUX(7)|PORT_GPCLR_GPWE(0x0009UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
      enablePortClocks(PORTA_CLOCK_MASK);

      PORTA->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x9U);
   }

};

/** 
 * End group Control_Group
 * @}
 */
/**
 * @addtogroup CRC_TODO_Group CRC, (Incomplete)
 * @brief Abstraction for (Incomplete)
 * @{
 */
#define USBDM_CRC0_IS_DEFINED 
/**
 * Peripheral information for CRC, (Incomplete).
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Crc0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile CRC_Type &crc() {
      return *(CRC_Type *)CRC0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_CRC_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End group CRC_TODO_Group
 * @}
 */
/**
 * @addtogroup CONSOLE_Group Console, Console Interface
 * @brief Abstraction for Console Interface
 * @{
 */
/** 
 * End group CONSOLE_Group
 * @}
 */
/**
 * @addtogroup DMA_Group DMA, Direct Memory Access (DMA)
 * @brief Abstraction for Direct Memory Access (DMA)
 * @{
 */
#define USBDM_DMA0_IS_DEFINED 
/**
 * Peripheral information for DMA, Direct Memory Access (DMA).
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Dma0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile DMA_Type &dma() {
      return *(DMA_Type *)DMA0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_DMA_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC7));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 17;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      DMA0_IRQn, DMA1_IRQn, DMA2_IRQn, DMA3_IRQn, 
      DMA4_IRQn, DMA5_IRQn, DMA6_IRQn, DMA7_IRQn, 
      DMA8_IRQn, DMA9_IRQn, DMA10_IRQn, DMA11_IRQn, 
      DMA12_IRQn, DMA13_IRQn, DMA14_IRQn, DMA15_IRQn, 
      DMA_Error_IRQn, };

   // Template:dma0_16ch

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Number of DMA channels implemented
   static constexpr unsigned NumChannels = 16;

   //! Number of DMA vectors implemented
   static constexpr unsigned NumVectors = 16;

};

/** 
 * End group DMA_Group
 * @}
 */
/**
 * @addtogroup DMAMUX_Group DMAMUX, Direct Memory Access (DMA)
 * @brief Abstraction for Direct Memory Access (DMA)
 * @{
 */
#define USBDM_DMAMUX0_IS_DEFINED 
/**
 * Peripheral information for DMAMUX, Direct Memory Access (DMA).
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Dmamux0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile DMAMUX_Type &dmamux() {
      return *(DMAMUX_Type *)DMAMUX0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DMAMUX0_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:dmamux0_16ch_trig_mk22d5

};

/** 
 * End group DMAMUX_Group
 * @}
 */
/**
 * @addtogroup EWM_Group EWM, External Watchdog Monitor
 * @brief Abstraction for External Watchdog Monitor
 * @{
 */
#define USBDM_EWM_IS_DEFINED 
/**
 * Peripheral information for EWM, External Watchdog Monitor.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class EwmInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile EWM_Type &ewm() {
      return *(EWM_Type *)EWM_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_EWM_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:ewm_int

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: EWM_IN               = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: EWM_OUT_b            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group EWM_Group
 * @}
 */
/**
 * @addtogroup FTFL_Group FTFL, Flash Memory Module
 * @brief Abstraction for Flash Memory Module
 * @{
 */
#define USBDM_FTFL_IS_DEFINED 
/**
 * Peripheral information for FTFL, Flash Memory Module.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class FtflInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile FTFL_Type &ftfl() {
      return *(FTFL_Type *)FTFL_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTFL_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      FTF_Command_IRQn, FTF_ReadCollision_IRQn, };

   // Template:ftfl_64k_flexrom

   // Sector size for program flash (minimum erase element)
   static constexpr unsigned programFlashSectorSize = 2048;

   // Phrase size for program flash (minimum programming element)
   static constexpr unsigned programFlashPhraseSize = 4;

   // Sector size for data flash (minimum erase element)
   static constexpr unsigned dataFlashSectorSize = 2048;

   // Phrase size for data flash (minimum programming element)
   static constexpr unsigned dataFlashPhraseSize = 4;

   struct EepromSizes {
      const uint16_t size;    // EEPROM size
      const uint8_t  value;   // Value to select size
   };

   /** EEPROM Data Set Size Field */
   static constexpr EepromSizes eepromSizes[] = {
         // Size  Value
         {  32,   0x09, },
         {  64,   0x08, },
         {  128,  0x07, },
         {  256,  0x06, },
         {  512,  0x05, },
         {  1024, 0x04, },
         {  2048, 0x03, },
         {  4096, 0x02, },
   };

   struct PartitionInformation {
      const uint32_t flashSize;     //! Remaining data flash
      const uint32_t eeepromSize;   //! Flash allocated to EEPROM backing store
      const uint8_t  value;         //! Partition value
   };

   /** Flash partition information */
   static constexpr PartitionInformation partitionInformation[] {
         // Flash   Backing   Value
         { 64*1024, 0*1024 ,  0xFF},
         { 32*1024, 32*1024 , 0x09},
         { 0*1024,  64*1024,  0x08},
   };

   /** Selects EEPROM size */
   enum EepromSel {
      eeprom32Bytes,
      eeprom64Bytes,
      eeprom128Bytes,
      eeprom256Bytes,
      eeprom512Bytes,
      eeprom1KBytes,
      eeprom2KBytes,
      eeprom4KBytes,
   };

   /** Selects division of FlexNVM between flash and EEPROM backing storage */
   enum PartitionSel {
      partition_flash64K_eeprom0K,
      partition_flash32K_eeprom32K,
      partition_flash0K_eeprom64K,
   
      // All EEPROM
      partition_flash0K_eeprom_all = partition_flash0K_eeprom64K,
   };

   /**
    * Selects division of the EEPROM into two regions 
    * This allows A/B regions to have different wear characteristics
    */
   enum PartitionSplit {
      partition_A1_B7_8ths = 0x00,                 //! A=1/8, B=7/8
      partition_A2_B6_8ths = 0x10,                 //! A=2/8=1/4, B=6/8=3/4
      partition_A4_B4_8ths = 0x30,                 //! A=4/8=1/2, B=4/8=1/2
      partition_A1_B3_4ths = partition_A2_B6_8ths, //! A=2/8=1/4, B=6/8=3/4
      partition_A1_B1_2ths = partition_A4_B4_8ths, //! A=4/8=1/2, B=4/8=1/2
   
      // Default - A = B = 1/2
      partition_default=partition_A4_B4_8ths,      //! Equal partitions
   };

   //! FlexNVM - EEPROM size
   static constexpr EepromSel eepromSel = eeprom2KBytes;

   //! FlexNVM - Flash EEPROM partition
   static constexpr PartitionSel partitionSel = partition_flash0K_eeprom64K;

   //! FlexNVM - EEPROM partition
   static constexpr PartitionSplit partitionSplit = partition_A4_B4_8ths;

};

/** 
 * End group FTFL_Group
 * @}
 */
/**
 * @addtogroup FTM_Group FTM, Shared Resources
 * @brief Abstraction for Shared Resources
 * @{
 */
#define USBDM_FTM_IS_DEFINED 
/**
 * Peripheral information for FTM, Shared Resources.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class FtmInfo {
public:
   // Template:ftm

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: FTM_CLKIN0           = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: FTM_CLKIN1           = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_FTM0_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Ftm0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile FTM_Type &ftm() {
      return *(FTM_Type *)FTM0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM0_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      FTM0_IRQn, };

   // Template:ftm0_8ch

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   //! Timer external input frequency 
   static constexpr uint32_t ftmExternalClock =  0;

   //! Default Timer Modulo
   static constexpr uint32_t modulo = FTM_MOD_MOD(10000);

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       FTM_SC_CPWMS(0)| // Centre-Aligned PWM Select
       FTM_SC_CLKS(1)|  // Clock Mode Selection
       FTM_SC_TOIE(0)|  // Timer Overflow Interrupt Enable
       FTM_SC_PS(0);    // Prescale Factor Selection 

   //! Default value for EXTTRIG) register
   static constexpr uint32_t exttrig  = 
       0x0|                              // External Trigger Enable
       FTM_EXTTRIG_INITTRIGEN(0);    // Initialization Trigger Enable 

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   /** Minimum resolution for PWM interval */
   static constexpr uint32_t minimumResolution=50;

   /** Minimum usable interval in ticks */      
   static constexpr uint32_t minimumInterval=20;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(ftm().SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): return 0;
      case FTM_SC_CLKS(1): return SystemBusClock;
      case FTM_SC_CLKS(2): return SystemMcgffClock;
      case FTM_SC_CLKS(3): return ftmExternalClock;
      }
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 8;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: FTM0_CH0             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: FTM0_CH1             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: FTM0_CH2             = PTC3 (p36)                     */  { PortCInfo,  GPIOC_BasePtr,  3,       PORT_PCR_MUX(4)|defaultPcrValue  },
         /*   3: FTM0_CH3             = PTC4 (p37)                     */  { PortCInfo,  GPIOC_BasePtr,  4,       PORT_PCR_MUX(4)|defaultPcrValue  },
         /*   4: FTM0_CH4             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   5: FTM0_CH5             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   6: FTM0_CH6             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   7: FTM0_CH7             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      enablePortClocks(PORTC_CLOCK_MASK);

      PORTC->GPCLR = pcrValue|PORT_PCR_MUX(4)|PORT_GPCLR_GPWE(0x0018UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
      enablePortClocks(PORTC_CLOCK_MASK);

      PORTC->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x18U);
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
            /*   0: FTM0_FLT0            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
            /*   1: FTM0_FLT1            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
            /*   2: FTM0_FLT2            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
            /*   3: FTM0_FLT3            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_FTM1_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Ftm1Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile FTM_Type &ftm() {
      return *(FTM_Type *)FTM1_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM1_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      FTM1_IRQn, };

   // Template:ftm1_2ch

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   //! Timer external input frequency 
   static constexpr uint32_t ftmExternalClock =  0;

   //! Default Timer Modulo
   static constexpr uint32_t modulo = FTM_MOD_MOD(10000);

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       FTM_SC_CPWMS(0)| // Centre-Aligned PWM Select
       FTM_SC_CLKS(1)|  // Clock Mode Selection
       FTM_SC_TOIE(0)|  // Timer Overflow Interrupt Enable
       FTM_SC_PS(0);    // Prescale Factor Selection 

   //! Default value for EXTTRIG) register
   static constexpr uint32_t exttrig  = 
       0x0|                              // External Trigger Enable
       FTM_EXTTRIG_INITTRIGEN(0);    // Initialization Trigger Enable 

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   /** Minimum resolution for PWM interval */
   static constexpr uint32_t minimumResolution=100;

   /** Minimum usable interval in ticks */      
   static constexpr uint32_t minimumInterval=20;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(ftm().SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): return 0;
      case FTM_SC_CLKS(1): return SystemBusClock;
      case FTM_SC_CLKS(2): return SystemMcgffClock;
      case FTM_SC_CLKS(3): return ftmExternalClock;
      }
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: FTM1_CH0             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: FTM1_CH1             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 1;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
            /*   0: FTM1_FLT0            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoQUAD {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 2;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
            /*   0: FTM1_QD_PHA          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
            /*   1: FTM1_QD_PHB          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

/** 
 * End group FTM_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Abstraction for Digital Input/Output
 * @{
 */
#define USBDM_GPIOA_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class GpioAInfo {
public:
   // Template:gpioa_0x400ff000

   //! Describes the port/gpio
   static constexpr PinInfo pinInfo { PortAInfo, GPIOA_BasePtr, 0, GPIO_DEFAULT_PCR  };
   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

};

#define USBDM_GPIOB_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class GpioBInfo {
public:
   // Template:gpioa_0x400ff000

   //! Describes the port/gpio
   static constexpr PinInfo pinInfo { PortBInfo, GPIOB_BasePtr, 0, GPIO_DEFAULT_PCR  };
   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

};

#define USBDM_GPIOC_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class GpioCInfo {
public:
   // Template:gpioa_0x400ff000

   //! Describes the port/gpio
   static constexpr PinInfo pinInfo { PortCInfo, GPIOC_BasePtr, 0, GPIO_DEFAULT_PCR  };
   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

};

#define USBDM_GPIOD_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class GpioDInfo {
public:
   // Template:gpioa_0x400ff000

   //! Describes the port/gpio
   static constexpr PinInfo pinInfo { PortDInfo, GPIOD_BasePtr, 0, GPIO_DEFAULT_PCR  };
   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

};

#define USBDM_GPIOE_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class GpioEInfo {
public:
   // Template:gpioa_0x400ff000

   //! Describes the port/gpio
   static constexpr PinInfo pinInfo { PortEInfo, GPIOE_BasePtr, 0, GPIO_DEFAULT_PCR  };
   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

};

/** 
 * End group GPIO_Group
 * @}
 */
/**
 * @addtogroup I2C_Group I2C, Inter-Integrated-Circuit Interface
 * @brief Abstraction for Inter-Integrated-Circuit Interface
 * @{
 */
#define USBDM_I2C0_IS_DEFINED 
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class I2c0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile I2C_Type &i2c() {
      return *(I2C_Type *)I2C0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C0_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      I2C0_IRQn, };

   // Template:i2c0_mk10d5

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = I2C_DEFAULT_PCR;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
      return SystemBusClock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: I2C0_SCL             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: I2C0_SDA             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group I2C_Group
 * @}
 */
/**
 * @addtogroup I2S_Group I2S, Synchronous Audio Interface
 * @brief Abstraction for Synchronous Audio Interface
 * @{
 */
#define USBDM_I2S0_IS_DEFINED 
/**
 * Peripheral information for I2S, Synchronous Audio Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class I2s0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile I2S_Type &i2s() {
      return *(I2S_Type *)I2S0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_I2S_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      I2S0_Tx_IRQn, I2S0_Rx_IRQn, };

   // Template:i2s0_1ch

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = I2C_DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int numSignals  = 8;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: I2S0_MCLK            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: I2S0_RX_BCLK         = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: I2S0_RX_FS           = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: I2S0_TX_BCLK         = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: I2S0_TX_FS           = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   5: I2S0_TXD0            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   6: I2S0_TXD1            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   7: I2S0_RXD0            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group I2S_Group
 * @}
 */
/**
 * @addtogroup LLWU_Group LLWU, Low-leakage Wake-up Unit
 * @brief Abstraction for Low-leakage Wake-up Unit
 * @{
 */
#define USBDM_LLWU_IS_DEFINED 
/**
 * Peripheral information for LLWU, Low-leakage Wake-up Unit.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class LlwuInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile LLWU_Type &llwu() {
      return *(LLWU_Type *)LLWU_BasePtr;
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      LLWU_IRQn, };

   // Template:llwu_pe4_filt2_rst

   // Module wake ups
   static constexpr uint8_t me =  
      LLWU_ME_WUME0(0) |  // LPTMR
      LLWU_ME_WUME1(0) |  // CMP0
      LLWU_ME_WUME2(0) |  // CMP1
      LLWU_ME_WUME3(0) |  // CMP2/3 (if present)
      LLWU_ME_WUME4(0) |  // TSI0 (if present)
      LLWU_ME_WUME5(0) |  // RTC Alarm
      LLWU_ME_WUME6(0) |  //
      LLWU_ME_WUME7(0);   // RTC Seconds

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   // LLWU Pin Enable registers
   static constexpr uint8_t pe1 = 
      LLWU_PE1_WUPE0(0)|   // LLWUP 0
      LLWU_PE1_WUPE1(0)|   // LLWUP 1
      LLWU_PE1_WUPE2(0)|   // LLWUP 2
      LLWU_PE1_WUPE3(0);   // LLWUP 3 

   static constexpr uint8_t pe2 = 
      LLWU_PE2_WUPE4(0)|   // LLWUP 4
      LLWU_PE2_WUPE5(0)|   // LLWUP 5
      LLWU_PE2_WUPE6(0)|   // LLWUP 6
      LLWU_PE2_WUPE7(0);   // LLWUP 7 

   static constexpr uint8_t pe3 = 
      LLWU_PE3_WUPE8(0)|   // LLWUP 8
      LLWU_PE3_WUPE9(0)|   // LLWUP 9
      LLWU_PE3_WUPE10(0)|  // LLWUP 10
      LLWU_PE3_WUPE11(0);  // LLWUP 11 

   static constexpr uint8_t pe4 = 
      LLWU_PE4_WUPE12(0)|  // LLWUP 12
      LLWU_PE4_WUPE13(0)|  // LLWUP 13
      LLWU_PE4_WUPE14(0)|  // LLWUP 14
      LLWU_PE4_WUPE15(0);  // LLWUP 15 

   // Pin Filter 1 register
   static constexpr uint8_t filt1 = 
      LLWU_FILT_FILTE(0) |   // Digital Filter On External Pin
      LLWU_FILT_FILTSEL(0);  // Filter Pin Select

   // Pin Filter 2 register
   static constexpr uint8_t filt2 =
      LLWU_FILT_FILTE(0) |   // Digital Filter On External Pin
      LLWU_FILT_FILTSEL(0);  // Filter Pin Select

   // LLWU Reset Enable register
   static constexpr uint8_t rst =
      LLWU_RST_LLRSTE(1) |  // Low-Leakage Mode RESET Enable
      LLWU_RST_RSTFILT(0);  // Digital Filter On RESET Pin

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Number of signals available in info table
   static constexpr int numSignals  = 16;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   1: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   2: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   3: LLWU_P3              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   5: LLWU_P5              = PTB0 (p27)                     */  { PortBInfo,  GPIOB_BasePtr,  0,       PORT_PCR_MUX(1)|defaultPcrValue  },
         /*   6: LLWU_P6              = PTC1 (p34)                     */  { PortCInfo,  GPIOC_BasePtr,  1,       PORT_PCR_MUX(1)|defaultPcrValue  },
         /*   7: LLWU_P7              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   8: LLWU_P8              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   9: LLWU_P9              = PTC5 (p38)                     */  { PortCInfo,  GPIOC_BasePtr,  5,       PORT_PCR_MUX(1)|defaultPcrValue  },
         /*  10: LLWU_P10             = PTC6 (p39)                     */  { PortCInfo,  GPIOC_BasePtr,  6,       PORT_PCR_MUX(1)|defaultPcrValue  },
         /*  11: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  12: LLWU_P12             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  13: LLWU_P13             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  14: LLWU_P14             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  15: LLWU_P15             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      enablePortClocks(PORTB_CLOCK_MASK|PORTC_CLOCK_MASK);

      PORTB->GPCLR = pcrValue|PORT_PCR_MUX(1)|PORT_GPCLR_GPWE(0x0001UL);
      PORTC->GPCLR = pcrValue|PORT_PCR_MUX(1)|PORT_GPCLR_GPWE(0x0062UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
      enablePortClocks(PORTB_CLOCK_MASK|PORTC_CLOCK_MASK);

      PORTB->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x1U);
      PORTC->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x62U);
   }

};

/** 
 * End group LLWU_Group
 * @}
 */
/**
 * @addtogroup LPTMR_Group LPTMR, Low Power Timer
 * @brief Abstraction for Low Power Timer
 * @{
 */
#define USBDM_LPTMR0_IS_DEFINED 
/**
 * Peripheral information for LPTMR, Low Power Timer.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Lptmr0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile LPTMR_Type &lptmr() {
      return *(LPTMR_Type *)LPTMR0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_LPTMR_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC5));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      LPTMR0_IRQn, };

   // Template:lptmr0

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Default Timer Compare value
   static constexpr uint32_t cmr = 65535;

   //! Default PSR value
   static constexpr uint32_t psr = 
      LPTMR_PSR_PRESCALE(0)|
      LPTMR_PSR_PBYP(0)|
      LPTMR_PSR_PCS(0);

   //! Default CSR value
   static constexpr uint32_t csr = 
      LPTMR_CSR_TIE(0)|
      LPTMR_CSR_TMS(0)|
      LPTMR_CSR_TFC(0)|
      LPTMR_CSR_TPP(0)|
      LPTMR_CSR_TPS(0);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as an uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(lptmr().PSR&LPTMR_PSR_PCS_MASK) {
      default:
      case LPTMR_PSR_PCS(0): return McgInfo::getMcgIrClock();
      case LPTMR_PSR_PCS(1): return SystemLpoClock;
      case LPTMR_PSR_PCS(2): return SimInfo::getErc32kClock();
      case LPTMR_PSR_PCS(3): return Osc0Info::getOscerClock();
      }
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
   
      float freq = getInputClockFrequency();
      if (lptmr().PSR&LPTMR_PSR_PBYP_MASK) {
         return freq;
      }
      return freq/(1<<(((lptmr().PSR&LPTMR_PSR_PRESCALE_MASK)>>LPTMR_PSR_PRESCALE_SHIFT)+1));
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
   
      uint32_t freq = getInputClockFrequency();
      if (lptmr().PSR&LPTMR_PSR_PBYP_MASK) {
         return freq;
      }
      return freq/(1<<(((lptmr().PSR&LPTMR_PSR_PRESCALE_MASK)>>LPTMR_PSR_PRESCALE_SHIFT)+1));
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 3;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   1: LPTMR0_ALT1          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: LPTMR0_ALT2          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group LPTMR_Group
 * @}
 */
/**
 * @addtogroup PDB_Group PDB, Programmable Delay Block
 * @brief Abstraction for Programmable Delay Block
 * @{
 */
#define USBDM_PDB0_IS_DEFINED 
/**
 * Peripheral information for PDB, Programmable Delay Block.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Pdb0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile PDB_Type &pdb() {
      return *(PDB_Type *)PDB0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PDB_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      PDB0_IRQn, };

   // Template:pdb0_2ch_2trig_1dac_2po

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   static constexpr uint32_t pdb_sc = 
      PDB_SC_MULT(0) |      // Multiplication Factor Select for Prescaler
      PDB_SC_PDBIE(0) |     // Interrupt Enable
      PDB_SC_TRGSEL(0) |    // Trigger Input Source Select
      PDB_SC_PRESCALER(0) | // Prescaler Divider Select
      PDB_SC_DMAEN(0) |     // DMA Enable
      PDB_SC_CONT(0) |     // Continuous Mode Enable
      PDB_SC_PDBEIE(0) |    // Sequence Error Interrupt Enable
      PDB_SC_LDMOD(0);      // Load Mode Select

   static constexpr uint32_t pdb_mod = 
      PDB_MOD_MOD(65535);  // PDB Modulus

   static constexpr uint32_t pdb_idly = 
      PDB_IDLY_IDLY(0);  // Counter Modulus

   struct PdbChannel {
      uint32_t c1;
      uint32_t dly0;
      uint32_t dly1;
   };

   // Number of PDB channels
   static constexpr size_t numChannels = 2;

   // Default values for channel registers
   static constexpr PdbChannel pdb_ch[numChannels] = {
   {                   // Channel[0] Control Register 1
      PDB_C1_BB(0x0) |   // Pre-Trigger Back-to-Back Operation Enable
      PDB_C1_TOS(0x0) |  // Pre-Trigger Output Select
      PDB_C1_EN(0x0),    // Pre-Trigger Enable
      PDB_DLY_DLY(0),  // Channel[0] pre-trigger delay 0
      PDB_DLY_DLY(0),  // Channel[0] pre-trigger delay 1
   },
   {                   // Channel[1] Control Register 1
      PDB_C1_BB(0x0) |   // Channel Pre-Trigger Back-to-Back Operation Enable
      PDB_C1_TOS(0x0) |  // Channel Pre-Trigger Output Select
      PDB_C1_EN(0x0),    // Channel Pre-Trigger Enable
      PDB_DLY_DLY(0),  // Channel[1] pre-trigger delay 0
      PDB_DLY_DLY(0),  // Channel[1] pre-trigger delay 1
   },
   };

   struct PdbDac {
      uint32_t dacintc;
      uint32_t dacint;
   };

   // Number of DACs
   static constexpr size_t numDacs = 1;

   // Default values for DAC registers
   static constexpr PdbDac pdb_dac[numDacs] = {
   {                    // DAC[0] Interval register
      PDB_INTC_EXT(0) | // DAC External Trigger Input Enable
      PDB_INTC_TOE(0),  // DAC Interval Trigger Enable
      PDB_INT_INT(0),   // DAC Interval
   },
   };

   static constexpr uint32_t pdb_poen = 
      PDB_POEN_POEN(0x0);   // Pulse-Out Enable

   // Number of PDB pulse outputs
   static constexpr size_t numPulseOutputs = 2;

   static constexpr uint32_t pdb_podly[numPulseOutputs] = {
      // Pulse Output[0] Delays {
      PDB_PODLY_DLY1(0) |  // Delay 1
      PDB_PODLY_DLY2(0),   // Delay 2

      // Pulse Output[1] Delays
      PDB_PODLY_DLY1(0) |  // Delay 1
      PDB_PODLY_DLY2(0),   // Delay 2
   }; 

   /**
     * Get PDB clock frequency
     *
     * @return Frequency as a uint32_t in Hz
     */
   static __attribute__((always_inline)) uint32_t getInputClockFrequency() {
      return SystemBusClock;
   }

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: PDB0_EXTRG           = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group PDB_Group
 * @}
 */
/**
 * @addtogroup PIT_Group PIT, Programmable Interrupt Timer
 * @brief Abstraction for Programmable Interrupt Timer
 * @{
 */
#define USBDM_PIT_IS_DEFINED 
/**
 * Peripheral information for PIT, Programmable Interrupt Timer.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class PitInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile PIT_Type &pit() {
      return *(PIT_Type *)PIT_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PIT_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 4;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      PIT0_IRQn, PIT1_IRQn, PIT2_IRQn, PIT3_IRQn, };

   // Template:pit_4ch_chain

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Default value for PIT load value register
   static constexpr uint32_t pit_ldval  = 4799;

   //! PIT operation in debug mode
   static constexpr uint32_t mcr = 
      PIT_MCR_FRZ(0) |  // Freeze in debug mode
      PIT_MCR_MDIS(0);  // Disable

   /**
    * Get clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static __attribute__((always_inline)) uint32_t getClockFrequency() {
      return SystemBusClock;
   }

};

/** 
 * End group PIT_Group
 * @}
 */
/**
 * @addtogroup PMC_Group PMC, Power Management Controller
 * @brief Abstraction for Power Management Controller
 * @{
 */
#define USBDM_PMC_IS_DEFINED 
/**
 * Peripheral information for PMC, Power Management Controller.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class PmcInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile PMC_Type &pmc() {
      return *(PMC_Type *)PMC_BasePtr;
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      PMC_IRQn, };

   // Template:pmc_mk

   //! Default value for Low Voltage Detect Status And Control 1 register
   static constexpr uint32_t pmc_lvdsc1  = 
      PMC_LVDSC1_LVDIE(0) | // Low-Voltage Detect Interrupt Enable
      PMC_LVDSC1_LVDRE(0) | // Low-Voltage Detect Reset Enable
      PMC_LVDSC1_LVDV(0);   // Low-Voltage Detect Voltage Select   

   //! Default value for Low Voltage Detect Status And Control 2 register
   static constexpr uint32_t pmc_lvdsc2  = 
      PMC_LVDSC2_LVWIE(0) | // Low-Voltage Warning Interrupt Enable
      PMC_LVDSC2_LVWV(0);   // Low-Voltage Warning Voltage Select   

   //! Default value for Regulator Status And Control register
   static constexpr uint32_t pmc_regsc  = 
   #ifdef PMC_REGSC_BGEN
      PMC_REGSC_BGEN(0) | // Bandgap Enable In VLPx Operation
   #endif
      PMC_REGSC_BGBE(0);  // Bandgap Buffer Enable   

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

};

/** 
 * End group PMC_Group
 * @}
 */
/**
 * @addtogroup Power_Group POWER, Power
 * @brief Abstraction for Power
 * @{
 */
#define USBDM_POWER_IS_DEFINED 
/**
 * Peripheral information for POWER, Power.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class PowerInfo {
public:
   //! Number of signals available in info table
   static constexpr int numSignals  = 11;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: VBAT                 = VBAT (p16)                     */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   1: VDD1                 = VDD1 (p1)                      */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   2: VDD2                 = VDD2 (p22)                     */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   3: VDDA                 = VDDA (p9)                      */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   4: VOUT33               = VOUT33 (p5)                    */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   5: VREFH                = VREFH (p10)                    */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   6: VREFL                = VREFL (p11)                    */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   7: VREGIN               = VREGIN (p6)                    */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   8: VSS1                 = VSS1 (p2)                      */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   9: VSS2                 = VSS2 (p23)                     */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*  10: VSSA                 = VSSA (p12)                     */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
   };

};

/** 
 * End group Power_Group
 * @}
 */
/**
 * @addtogroup SMC_Group SMC, System Mode Controller
 * @brief Abstraction for System Mode Controller
 * @{
 */
#define USBDM_SMC_IS_DEFINED 
/**
 * Peripheral information for SMC, System Mode Controller.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class SmcInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile SMC_Type &smc() {
      return *(SMC_Type *)SMC_BasePtr;
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:smc_mk11d5

   // Power Mode Protection Register
   static constexpr uint8_t pmprot =  
#ifdef SMC_PMPROT_AHSRUN
      SMC_PMPROT_AHSRUN(0) |  // Allow High Speed Run mode
#endif
      SMC_PMPROT_AVLP(1) |  // Allow very low power modes
      SMC_PMPROT_ALLS(1) |  // Allow low leakage stop mode
      SMC_PMPROT_AVLLS(1);  // Allow very low leakage stop mode

#ifdef SMC_PMCTRL_LPWUI
   // Power Mode Control Register
   static constexpr uint8_t pmctrl =  
      SMC_PMCTRL_LPWUI(1);   // Low Power Wake Up on Interrupt

#endif

   // VLLS Control Register
   static constexpr uint8_t stopctrl =  
#ifdef SMC_STOPCTRL_PSTOPO
      SMC_STOPCTRL_PSTOPO(0) |  // Partial Stop Option (if present)
#endif

      SMC_STOPCTRL_PORPO(0) |  // POR Power Option
#ifdef SMC_STOPCTRL_LPOPO
      SMC_STOPCTRL_LPOPO(0) |  // POR Power Option (if present)
#endif

      SMC_STOPCTRL_VLLSM(3);   // LLS or VLLS Mode Control

};

/** 
 * End group SMC_Group
 * @}
 */
/**
 * @addtogroup SPI_Group SPI, Serial Peripheral Interface
 * @brief Abstraction for Serial Peripheral Interface
 * @{
 */
#define USBDM_SPI0_IS_DEFINED 
/**
 * Peripheral information for SPI, Serial Peripheral Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Spi0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile SPI_Type &spi() {
      return *(SPI_Type *)SPI0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_SPI0_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      SPI0_IRQn, };

   // Template:spi0_mk_pcsis6

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Default communication clock phase and clock polarity (CPHA+CPOL)
   static constexpr uint32_t mode = 
      SPI_CTAR_MODE(0);

   //! Default communication order (MSB/LSB first)
   static constexpr uint32_t lsbfe = 
      SPI_CTAR_LSBFE(0);

   static uint32_t getClockFrequency() {
      return SystemBusClock;
   }

   //! Default speed (Hz)
   static constexpr uint32_t speed = 
      10000000;

   //! Number of signals available in info table
   static constexpr int numSignals  = 8;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: SPI0_SCK             = PTD1 (p42)                     */  { PortDInfo,  GPIOD_BasePtr,  1,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   1: SPI0_SIN             = PTD3 (p44)                     */  { PortDInfo,  GPIOD_BasePtr,  3,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   2: SPI0_SOUT            = PTD2 (p43)                     */  { PortDInfo,  GPIOD_BasePtr,  2,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   3: SPI0_PCS0            = PTD0 (p41)                     */  { PortDInfo,  GPIOD_BasePtr,  0,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   4: SPI0_PCS1            = PTD4 (p45)                     */  { PortDInfo,  GPIOD_BasePtr,  4,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   5: SPI0_PCS2            = PTD5 (p46)                     */  { PortDInfo,  GPIOD_BasePtr,  5,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   6: SPI0_PCS3            = PTD6 (p47)                     */  { PortDInfo,  GPIOD_BasePtr,  6,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   7: SPI0_PCS4            = PTC0 (p33)                     */  { PortCInfo,  GPIOC_BasePtr,  0,       PORT_PCR_MUX(2)|defaultPcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      enablePortClocks(PORTC_CLOCK_MASK|PORTD_CLOCK_MASK);

      PORTC->GPCLR = pcrValue|PORT_PCR_MUX(2)|PORT_GPCLR_GPWE(0x0001UL);
      PORTD->GPCLR = pcrValue|PORT_PCR_MUX(2)|PORT_GPCLR_GPWE(0x007FUL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
      enablePortClocks(PORTC_CLOCK_MASK|PORTD_CLOCK_MASK);

      PORTC->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x1U);
      PORTD->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x7FU);
   }

};

/** 
 * End group SPI_Group
 * @}
 */
/**
 * @addtogroup UART_Group UART, Universal Asynchronous Receiver/Transmitter
 * @brief Abstraction for Universal Asynchronous Receiver/Transmitter
 * @{
 */
#define USBDM_UART0_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Uart0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile UART_Type &uart() {
      return *(UART_Type *)UART0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART0_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      UART0_RxTx_IRQn, UART0_Error_IRQn, };

   // Template:uart0_mk10d7_c7816

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Indicates whether the UART needs a write to clear status errors
   static constexpr bool statusNeedsWrite = false;

   //! Default Baud rate used if not explicitly given
   static constexpr uint32_t defaultBaudRate = 115200;

   //! Default buffer size for receive queue when interrupt driven
   static constexpr unsigned receiveBufferSize = 50;

   //! Default buffer size for transmit queue when interrupt driven
   static constexpr unsigned transmitBufferSize = 50;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static inline uint32_t getInputClockFrequency() {
      return SimInfo::getUart0Clock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 5;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: UART0_TX             = PTA2 (p19)                     */  { PortAInfo,  GPIOA_BasePtr,  2,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   1: UART0_RX             = PTA1 (p18)                     */  { PortAInfo,  GPIOA_BasePtr,  1,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   2: UART0_RTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: UART0_CTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: UART0_COL_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      enablePortClocks(PORTA_CLOCK_MASK);

      PORTA->GPCLR = pcrValue|PORT_PCR_MUX(2)|PORT_GPCLR_GPWE(0x0006UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
      enablePortClocks(PORTA_CLOCK_MASK);

      PORTA->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x6U);
   }

};

#define USBDM_UART1_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Uart1Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile UART_Type &uart() {
      return *(UART_Type *)UART1_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART1_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      UART1_RxTx_IRQn, UART1_Error_IRQn, };

   // Template:uart1_mk10d10

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Indicates whether the UART needs a write to clear status errors
   static constexpr bool statusNeedsWrite = false;

   //! Default Baud rate used if not explicitly given
   static constexpr uint32_t defaultBaudRate = 115200;

   //! Default buffer size for receive queue when interrupt driven
   static constexpr unsigned receiveBufferSize = 50;

   //! Default buffer size for transmit queue when interrupt driven
   static constexpr unsigned transmitBufferSize = 50;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static inline uint32_t getInputClockFrequency() {
      return SimInfo::getUart1Clock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: UART1_TX             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: UART1_RX             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: UART1_RTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: UART1_CTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART2_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Uart2Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile UART_Type &uart() {
      return *(UART_Type *)UART2_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART2_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      UART2_RxTx_IRQn, UART2_Error_IRQn, };

   // Template:uart1_mk10d10

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (0 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Indicates whether the UART needs a write to clear status errors
   static constexpr bool statusNeedsWrite = false;

   //! Default Baud rate used if not explicitly given
   static constexpr uint32_t defaultBaudRate = 115200;

   //! Default buffer size for receive queue when interrupt driven
   static constexpr unsigned receiveBufferSize = 50;

   //! Default buffer size for transmit queue when interrupt driven
   static constexpr unsigned transmitBufferSize = 50;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static inline uint32_t getInputClockFrequency() {
      return SimInfo::getUart2Clock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: UART2_TX             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: UART2_RX             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: UART2_RTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: UART2_CTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group UART_Group
 * @}
 */
/**
 * @addtogroup USB_Group USB, USB OTG Controller
 * @brief Abstraction for USB OTG Controller
 * @{
 */
#define USBDM_USB0_IS_DEFINED 
/**
 * Peripheral information for USB, USB OTG Controller.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Usb0Info {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile USB_Type &usb() {
      return *(USB_Type *)USB0_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_USBOTG_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      USB0_IRQn, };

   // Template:usb0_otg_c

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = (1 == 1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  7;

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: USB0_DM              = USB0_DM (p4)                   */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   1: USB0_DP              = USB0_DP (p3)                   */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   2: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   3: USB_SOF_OUT          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group USB_Group
 * @}
 */
/**
 * @addtogroup USBDCD_Group USBDCD, USB Device Charger Detection
 * @brief Abstraction for USB Device Charger Detection
 * @{
 */
#define USBDM_USBDCD_IS_DEFINED 
/**
 * Peripheral information for USBDCD, USB Device Charger Detection.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class UsbdcdInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile USBDCD_Type &usbdcd() {
      return *(USBDCD_Type *)USBDCD_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_USBDCD_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {
      USBDCD_IRQn, };

   // Template:usbdcd_v1_1

};

/** 
 * End group USBDCD_Group
 * @}
 */
/**
 * @addtogroup VREF_Group VREF, Voltage Reference
 * @brief Abstraction for Voltage Reference
 * @{
 */
#define USBDM_VREF_IS_DEFINED 
/**
 * Peripheral information for VREF, Voltage Reference.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class VrefInfo {
public:
   //! Hardware base pointer
   __attribute__((always_inline)) static volatile VREF_Type &vref() {
      return *(VREF_Type *)VREF_BasePtr;
   }

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_VREF_MASK;

   //! Address of clock register for peripheral
   __attribute__((always_inline)) static volatile uint32_t &clockReg() {
      return *(uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));
   }

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:vref_c

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   /** Map all allocated pins on peripheral when enabled */
   static constexpr bool mapPinsOnEnable = true;

   static constexpr uint8_t vref_trm = 
       VREF_TRM_CHOPEN(1) | // Chop oscillator enable
       VREF_TRM_TRIM(32);   // Trim bits 

   static constexpr uint8_t vref_sc = 
       VREF_SC_VREFEN(1) |   // Internal Voltage Reference enable
       VREF_SC_REGEN(1) |    // Regulator enable
       VREF_SC_ICOMPEN(1) |  // Second order curvature compensation enable
       VREF_SC_MODE_LV(1);   // Buffer Mode selection 

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: VREF_OUT             = VREF_OUT (p13)                 */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group VREF_Group
 * @}
 */
/** 
 * End group USBDM_Group
 * @}
 */

} // End namespace USBDM


#include "adc.h"
#include "ftm.h"
#include "gpio.h"

/**
 * Namespace enclosing USBDM classes
 */
namespace USBDM {

/**
 * @addtogroup USBDM_Group USBDM Peripheral Interface
 * @brief Hardware Peripheral Interface and library
 * @{
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Abstraction for Analogue Input
 * @{
 */
using Adc_p8               = const USBDM::Adc0Channel<19>;
using Adc_p7               = const USBDM::Adc0Channel<0>;
/** 
 * End group ADC_Group
 * @}
 */
/**
 * @addtogroup FTM_Group FTM, PWM, Input capture and Output compare
 * @brief Abstraction for PWM, Input capture and Output compare
 * @{
 */
using Ftm_p36              = const USBDM::Ftm0Channel<2>;
using Ftm_p37              = const USBDM::Ftm0Channel<3>;
/** 
 * End group FTM_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Abstraction for Digital Input/Output
 * @{
 */
using Gpio_p27             = const USBDM::GpioB<0>;
using Gpio_p28             = const USBDM::GpioB<1>;
using Gpio_p29             = const USBDM::GpioB<2>;
using Gpio_p30             = const USBDM::GpioB<3>;
using Gpio_p31             = const USBDM::GpioB<16>;
using Gpio_p32             = const USBDM::GpioB<17>;
using Gpio_p34             = const USBDM::GpioC<1>;
using Gpio_p35             = const USBDM::GpioC<2>;
using Gpio_p38             = const USBDM::GpioC<5>;
using Gpio_p39             = const USBDM::GpioC<6>;
using Gpio_p48             = const USBDM::GpioD<7>;
/** 
 * End group GPIO_Group
 * @}
 */
/**
 * Used to configure pin-mapping before 1st use of peripherals
 */
extern void mapAllPins();
/** 
 * End group USBDM_Group
 * @}
 */

} // End namespace USBDM

/**
 *
 * @page PinSummary Pin Mapping
 *
 * @section PinsByPinName Pins by Pin Name
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  ADC0_DM0                 | ADC0_DM0/ADC0_SE19                          | p8                        | N/C       
 *  ADC0_DP0                 | ADC0_DP0/ADC0_SE0                           | p7                        | N/C       
 *  EXTAL32                  | EXTAL32                                     | p15                       | N/C       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | p17                       | SWD_CLK       
 *  PTA1                     | UART0_RX                                    | p18                       | SWD_Rx       
 *  PTA2                     | UART0_TX                                    | p19                       | SWD_Tx       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | p20                       | SWD_DIO       
 *  PTA4                     | -                                           | p21                       | EZP_CSb       
 *  PTA18                    | EXTAL0                                      | p24                       | EXTAL       
 *  PTA19                    | XTAL0                                       | p25                       | XTAL       
 *  PTB0                     | GPIOB_0/LLWU_P5                             | p27                       | SW_F4b       
 *  PTB1                     | GPIOB_1                                     | p28                       | SW_F3b       
 *  PTB2                     | GPIOB_2                                     | p29                       | SW_F2b       
 *  PTB3                     | GPIOB_3                                     | p30                       | SW_F1b       
 *  PTB16                    | GPIOB_16                                    | p31                       | SW_Sb       
 *  PTB17                    | GPIOB_17                                    | p32                       | TP1 (Debug UART_Tx)       
 *  PTC0                     | SPI0_PCS4                                   | p33                       | LCD_CSb       
 *  PTC1                     | GPIOC_1/LLWU_P6                             | p34                       | OvenFan       
 *  PTC2                     | GPIOC_2                                     | p35                       | Heater       
 *  PTC3                     | FTM0_CH2                                    | p36                       | CaseFan       
 *  PTC4                     | FTM0_CH3                                    | p37                       | Spare       
 *  PTC5                     | GPIOC_5/LLWU_P9                             | p38                       | Buzzer       
 *  PTC6                     | GPIOC_6/LLWU_P10                            | p39                       | OvenFanLed       
 *  PTC7                     | CMP0_IN1                                    | p40                       | Vmains       
 *  PTD0                     | SPI0_PCS0                                   | p41                       | T4_CSb       
 *  PTD1                     | SPI0_SCK                                    | p42                       | SCK       
 *  PTD2                     | SPI0_SOUT                                   | p43                       | MOSI       
 *  PTD3                     | SPI0_SIN                                    | p44                       | MISO       
 *  PTD4                     | SPI0_PCS1                                   | p45                       | T3_CSb       
 *  PTD5                     | SPI0_PCS2                                   | p46                       | T1_CSb       
 *  PTD6                     | SPI0_PCS3                                   | p47                       | T2_CSb       
 *  PTD7                     | GPIOD_7                                     | p48                       | HeaterLed       
 *  RESET_b                  | RESET_b                                     | p26                       | Resetb       
 *  USB0_DM                  | USB0_DM                                     | p4                        | USB_DM       
 *  USB0_DP                  | USB0_DP                                     | p3                        | USB_DP       
 *  VBAT                     | VBAT                                        | p16                       | 3.3V       
 *  VDD1                     | VDD1                                        | p1                        | 3.3V       
 *  VDD2                     | VDD2                                        | p22                       | 3.3V       
 *  VDDA                     | VDDA                                        | p9                        | 3.3V       
 *  VOUT33                   | VOUT33                                      | p5                        | 3.3V       
 *  VREFH                    | VREFH                                       | p10                       | 3.3V       
 *  VREFL                    | VREFL                                       | p11                       | Gnd       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5                  | p13                       | N/C       
 *  VREGIN                   | VREGIN                                      | p6                        | 5V       
 *  VSS1                     | VSS1                                        | p2                        | Gnd       
 *  VSS2                     | VSS2                                        | p23                       | Gnd       
 *  VSSA                     | VSSA                                        | p12                       | Gnd       
 *  XTAL32                   | XTAL32                                      | p14                       | N/C       
 *
 *
 * @section PinsByLocation Pins by Location
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  VDD1                     | VDD1                                        | p1                        | 3.3V       
 *  VSS1                     | VSS1                                        | p2                        | Gnd       
 *  USB0_DP                  | USB0_DP                                     | p3                        | USB_DP       
 *  USB0_DM                  | USB0_DM                                     | p4                        | USB_DM       
 *  VOUT33                   | VOUT33                                      | p5                        | 3.3V       
 *  VREGIN                   | VREGIN                                      | p6                        | 5V       
 *  ADC0_DP0                 | ADC0_DP0/ADC0_SE0                           | p7                        | N/C       
 *  ADC0_DM0                 | ADC0_DM0/ADC0_SE19                          | p8                        | N/C       
 *  VDDA                     | VDDA                                        | p9                        | 3.3V       
 *  VREFH                    | VREFH                                       | p10                       | 3.3V       
 *  VREFL                    | VREFL                                       | p11                       | Gnd       
 *  VSSA                     | VSSA                                        | p12                       | Gnd       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5                  | p13                       | N/C       
 *  XTAL32                   | XTAL32                                      | p14                       | N/C       
 *  EXTAL32                  | EXTAL32                                     | p15                       | N/C       
 *  VBAT                     | VBAT                                        | p16                       | 3.3V       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | p17                       | SWD_CLK       
 *  PTA1                     | UART0_RX                                    | p18                       | SWD_Rx       
 *  PTA2                     | UART0_TX                                    | p19                       | SWD_Tx       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | p20                       | SWD_DIO       
 *  PTA4                     | -                                           | p21                       | EZP_CSb       
 *  VDD2                     | VDD2                                        | p22                       | 3.3V       
 *  VSS2                     | VSS2                                        | p23                       | Gnd       
 *  PTA18                    | EXTAL0                                      | p24                       | EXTAL       
 *  PTA19                    | XTAL0                                       | p25                       | XTAL       
 *  RESET_b                  | RESET_b                                     | p26                       | Resetb       
 *  PTB0                     | GPIOB_0/LLWU_P5                             | p27                       | SW_F4b       
 *  PTB1                     | GPIOB_1                                     | p28                       | SW_F3b       
 *  PTB2                     | GPIOB_2                                     | p29                       | SW_F2b       
 *  PTB3                     | GPIOB_3                                     | p30                       | SW_F1b       
 *  PTB16                    | GPIOB_16                                    | p31                       | SW_Sb       
 *  PTB17                    | GPIOB_17                                    | p32                       | TP1 (Debug UART_Tx)       
 *  PTC0                     | SPI0_PCS4                                   | p33                       | LCD_CSb       
 *  PTC1                     | GPIOC_1/LLWU_P6                             | p34                       | OvenFan       
 *  PTC2                     | GPIOC_2                                     | p35                       | Heater       
 *  PTC3                     | FTM0_CH2                                    | p36                       | CaseFan       
 *  PTC4                     | FTM0_CH3                                    | p37                       | Spare       
 *  PTC5                     | GPIOC_5/LLWU_P9                             | p38                       | Buzzer       
 *  PTC6                     | GPIOC_6/LLWU_P10                            | p39                       | OvenFanLed       
 *  PTC7                     | CMP0_IN1                                    | p40                       | Vmains       
 *  PTD0                     | SPI0_PCS0                                   | p41                       | T4_CSb       
 *  PTD1                     | SPI0_SCK                                    | p42                       | SCK       
 *  PTD2                     | SPI0_SOUT                                   | p43                       | MOSI       
 *  PTD3                     | SPI0_SIN                                    | p44                       | MISO       
 *  PTD4                     | SPI0_PCS1                                   | p45                       | T3_CSb       
 *  PTD5                     | SPI0_PCS2                                   | p46                       | T1_CSb       
 *  PTD6                     | SPI0_PCS3                                   | p47                       | T2_CSb       
 *  PTD7                     | GPIOD_7                                     | p48                       | HeaterLed       
 *
 *
 * @section PinsByFunction Pins by Function
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  PTA4                     | -                                           | p21                       | EZP_CSb       
 *  ADC0_DM0                 | ADC0_DM0/ADC0_SE19                          | p8                        | N/C       
 *  ADC0_DP0                 | ADC0_DP0/ADC0_SE0                           | p7                        | N/C       
 *  PTC7                     | CMP0_IN1                                    | p40                       | Vmains       
 *  PTA18                    | EXTAL0                                      | p24                       | EXTAL       
 *  EXTAL32                  | EXTAL32                                     | p15                       | N/C       
 *  PTC3                     | FTM0_CH2                                    | p36                       | CaseFan       
 *  PTC4                     | FTM0_CH3                                    | p37                       | Spare       
 *  PTB0                     | GPIOB_0/LLWU_P5                             | p27                       | SW_F4b       
 *  PTB1                     | GPIOB_1                                     | p28                       | SW_F3b       
 *  PTB2                     | GPIOB_2                                     | p29                       | SW_F2b       
 *  PTB3                     | GPIOB_3                                     | p30                       | SW_F1b       
 *  PTB16                    | GPIOB_16                                    | p31                       | SW_Sb       
 *  PTB17                    | GPIOB_17                                    | p32                       | TP1 (Debug UART_Tx)       
 *  PTC1                     | GPIOC_1/LLWU_P6                             | p34                       | OvenFan       
 *  PTC2                     | GPIOC_2                                     | p35                       | Heater       
 *  PTC5                     | GPIOC_5/LLWU_P9                             | p38                       | Buzzer       
 *  PTC6                     | GPIOC_6/LLWU_P10                            | p39                       | OvenFanLed       
 *  PTD7                     | GPIOD_7                                     | p48                       | HeaterLed       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | p17                       | SWD_CLK       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | p20                       | SWD_DIO       
 *  RESET_b                  | RESET_b                                     | p26                       | Resetb       
 *  PTD0                     | SPI0_PCS0                                   | p41                       | T4_CSb       
 *  PTD4                     | SPI0_PCS1                                   | p45                       | T3_CSb       
 *  PTD5                     | SPI0_PCS2                                   | p46                       | T1_CSb       
 *  PTD6                     | SPI0_PCS3                                   | p47                       | T2_CSb       
 *  PTC0                     | SPI0_PCS4                                   | p33                       | LCD_CSb       
 *  PTD1                     | SPI0_SCK                                    | p42                       | SCK       
 *  PTD3                     | SPI0_SIN                                    | p44                       | MISO       
 *  PTD2                     | SPI0_SOUT                                   | p43                       | MOSI       
 *  PTA1                     | UART0_RX                                    | p18                       | SWD_Rx       
 *  PTA2                     | UART0_TX                                    | p19                       | SWD_Tx       
 *  USB0_DM                  | USB0_DM                                     | p4                        | USB_DM       
 *  USB0_DP                  | USB0_DP                                     | p3                        | USB_DP       
 *  VBAT                     | VBAT                                        | p16                       | 3.3V       
 *  VDD1                     | VDD1                                        | p1                        | 3.3V       
 *  VDD2                     | VDD2                                        | p22                       | 3.3V       
 *  VDDA                     | VDDA                                        | p9                        | 3.3V       
 *  VOUT33                   | VOUT33                                      | p5                        | 3.3V       
 *  VREFH                    | VREFH                                       | p10                       | 3.3V       
 *  VREFL                    | VREFL                                       | p11                       | Gnd       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5                  | p13                       | N/C       
 *  VREGIN                   | VREGIN                                      | p6                        | 5V       
 *  VSS1                     | VSS1                                        | p2                        | Gnd       
 *  VSS2                     | VSS2                                        | p23                       | Gnd       
 *  VSSA                     | VSSA                                        | p12                       | Gnd       
 *  PTA19                    | XTAL0                                       | p25                       | XTAL       
 *  XTAL32                   | XTAL32                                      | p14                       | N/C       
 *
 */

#endif /* PROJECT_HEADERS_PIN_MAPPING_H */
